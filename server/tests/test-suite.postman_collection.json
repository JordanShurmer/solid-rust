{
	"info": {
		"_postman_id": "85d10b57-c5ed-4377-84e5-cb28a1900796",
		"name": "test-suite",
		"description": "A collection of requests used to validate the implementation.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ldp",
			"item": [
				{
					"name": "RDFSource",
					"item": [
						{
							"name": "Successful Turtle->Turtle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89a0800b-e3eb-465d-9220-0d5bc3b77d3c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is text/turtle\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", 'text/turtle');",
											"});",
											"pm.test(\"Link header advertises RDFSource\", function () {",
											"    pm.response.to.have.header(\"Link\", '<http://www.w3.org/ns/ldp#RDFSource>; rel=\"type\", <http://www.w3.org/ns/ldp#Resource>; rel=\"type\"');",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/turtle",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base-url}}/tests/static/profile.ttl",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"tests",
										"static",
										"profile.ttl"
									]
								},
								"description": "A simple GET request for a .ttl resource and text/turtle content-type"
							},
							"response": []
						},
						{
							"name": "Successful JsonLD->JsonLD",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89a0800b-e3eb-465d-9220-0d5bc3b77d3c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content-Type is text/turtle\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", 'application/ld+json');",
											"});",
											"pm.test(\"Link header advertises RDFSource\", function () {",
											"    pm.response.to.have.header(\"Link\", '<http://www.w3.org/ns/ldp#RDFSource>; rel=\"type\", <http://www.w3.org/ns/ldp#Resource>; rel=\"type\"');",
											"});",
											"pm.test(\"Body is valid json\", function () {",
											"   pm.response.to.have.jsonBody(); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "text/turtle"
									}
								],
								"url": {
									"raw": "{{base-url}}/tests/static/profile.jsonld",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"tests",
										"static",
										"profile.jsonld"
									]
								},
								"description": "A simple GET request for a .ttl resource and text/turtle content-type"
							},
							"response": []
						}
					],
					"description": "Requests for RDFSources",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9349cea2-159f-43e2-97d8-f90038e4d036",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "86095adb-3fff-4353-bf76-dd024a868f44",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Has correct Allow header\", function () {",
									"    pm.response.to.have.header('Allow', 'GET,HEAD,OPTIONS')",
									"})"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Non-RDFSource",
					"item": [
						{
							"name": "Successful Binary",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8973c9eb-dbab-4215-bab8-9e8520f4c371",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Link header advertises NonRDFSource\", function () {",
											"    pm.response.to.have.header(\"Link\", '<http://www.w3.org/ns/ldp#NonRDFSource>; rel=\"type\", <http://www.w3.org/ns/ldp#Resource>; rel=\"type\"');",
											"});",
											"pm.test('Has a body', function() {",
											"    pm.response.to.have.body();",
											"});",
											"pm.test('Has binary content-type', function () {",
											"   pm.response.to.have.header(\"Content-Type\", 'application/octet-stream'); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base-url}}/tests/static/solid.ico",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"tests",
										"static",
										"solid.ico"
									]
								}
							},
							"response": []
						}
					],
					"description": "Requests for binaries and everything non-rdf",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f4a8178f-ab11-46d2-8440-da7c7cdac49f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7b255a3b-ab12-4157-b451-008e01c2726f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Has correct Allow header\", function () {",
									"    pm.response.to.have.header('Allow', 'GET,HEAD,OPTIONS')",
									"})"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Requests specific to the LDP functionality of a Solid server",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5af4feb7-c860-481c-a21f-6412fd57f1c4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b9d3b886-3b78-4c04-918a-77bcaceef74b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "http",
			"item": [
				{
					"name": "Conditional",
					"item": [
						{
							"name": "If-Match: 412",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3ebdbda-d45f-4bb2-8e5e-06ee4b71e17f",
										"exec": [
											"pm.test(\"If-Match Precondition fails (412)\", function () {",
											"    pm.response.to.have.status(412);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "If-Match",
										"value": "foo-bar",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base-url}}/tests/static/profile.ttl",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"tests",
										"static",
										"profile.ttl"
									]
								},
								"description": "A request which contains an If-Match header value which should not match the server's, therfore result in a 412 response"
							},
							"response": []
						},
						{
							"name": "If-Match: 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d73c914-5f0b-4df2-a577-fc566efb8233",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "If-Match",
										"value": "11714434167580421662",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base-url}}/tests/static/profile.ttl",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"tests",
										"static",
										"profile.ttl"
									]
								},
								"description": "A requeset containing an If-Match header which should match the server's"
							},
							"response": []
						},
						{
							"name": "If-Unmodified-Since: 412",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42f039ff-89f2-4a9a-a696-0ace0b337339",
										"exec": [
											"pm.test(\"If-Match Precondition fails (412)\", function () {",
											"    pm.response.to.have.status(412);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "If-Unmodified-Since",
										"value": "Sat, 26 Oct 2000 02:04:36 GMT",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base-url}}/tests/static/profile.ttl",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"tests",
										"static",
										"profile.ttl"
									]
								},
								"description": "A request for a resource, but it's been modified more recently than I want"
							},
							"response": []
						},
						{
							"name": "If-Unmodified-Since: 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42f039ff-89f2-4a9a-a696-0ace0b337339",
										"exec": [
											"pm.test(\"If-Match Precondition fails (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "If-Unmodified-Since",
										"type": "text",
										"value": "Sat, 26 Oct 9000 02:04:36 GMT"
									}
								],
								"url": {
									"raw": "{{base-url}}/tests/static/profile.ttl",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"tests",
										"static",
										"profile.ttl"
									]
								},
								"description": "A request for a resource which has not been modified"
							},
							"response": []
						},
						{
							"name": "If-None-Match: 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27d161f4-360f-48a0-b85e-7d581cb6c298",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "If-None-Match",
										"value": "foobar, baz",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base-url}}/tests/static/profile.ttl",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"tests",
										"static",
										"profile.ttl"
									]
								},
								"description": "A request which sends an If-None-Match header which should not match the server's"
							},
							"response": []
						},
						{
							"name": "If-None-Match: 304",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27d161f4-360f-48a0-b85e-7d581cb6c298",
										"exec": [
											"pm.test(\"Status code is 304\", function () {",
											"    pm.response.to.have.status(304);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [
									{
										"key": "If-None-Match",
										"type": "text",
										"value": "foobar, 11714434167580421662"
									}
								],
								"url": {
									"raw": "{{base-url}}/tests/static/profile.ttl",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"tests",
										"static",
										"profile.ttl"
									]
								},
								"description": "A request which sends an If-None-Match header which should not match the server's"
							},
							"response": []
						},
						{
							"name": "If-Modified-Since: 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d3f45fa-7690-4d04-ad37-43a38e497627",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "If-Modified-Since",
										"value": "Sat, 26 Oct 2000 02:04:36 GMT",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base-url}}/tests/static/profile.ttl",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"tests",
										"static",
										"profile.ttl"
									]
								},
								"description": "A request for a resource which has indeed been modified"
							},
							"response": []
						},
						{
							"name": "If-Modified-Since: 304",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d3f45fa-7690-4d04-ad37-43a38e497627",
										"exec": [
											"pm.test(\"Status code is 304\", function () {",
											"    pm.response.to.have.status(304);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "If-Modified-Since",
										"type": "text",
										"value": "Sat, 26 Oct 9000 02:04:36 GMT"
									}
								],
								"url": {
									"raw": "{{base-url}}/tests/static/profile.ttl",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"tests",
										"static",
										"profile.ttl"
									]
								},
								"description": "A request for a resource which has indeed been modified"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30ec3d4e-b4b4-4d59-9952-544f7552cc4a",
								"exec": [
									"const moment = require('moment');",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base-url}}/tests/static/something-not-found",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"tests",
								"static",
								"something-not-found"
							]
						},
						"description": "A request for a non-existant resource should 404"
					},
					"response": []
				},
				{
					"name": "Okay",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8544d077-b467-4e01-bfb4-4ef8c779cdc2",
								"exec": [
									"const moment = require('moment');",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Date header is correct\", function () {",
									"    pm.response.to.have.header('date');",
									"    const httpDate = moment(pm.response.headers.get('date'));",
									"    pm.expect(httpDate.isSame(moment(), 'minute')).to.be.true;",
									"});",
									"pm.test('Content-Length is accurate', function () {",
									"    pm.response.to.have.header('Content-Length', `${pm.response.text().length}`);",
									"});",
									"pm.test(\"Last-Modified and ETag header are correct\", function () {",
									"    pm.response.to.have.header('last-modified');",
									"    const modifiedDate = moment(pm.response.headers.get('last-modified'));",
									"    pm.expect(modifiedDate.isBefore(moment()));",
									"    ",
									"    pm.response.to.have.header('ETag');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base-url}}/tests/static/profile.ttl",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"tests",
								"static",
								"profile.ttl"
							]
						},
						"description": "A simple succeful request. Validate various http headers et al."
					},
					"response": []
				},
				{
					"name": "Not Acceptable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4f82edf-db32-4cca-974d-6de490771310",
								"exec": [
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/foobar",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/tests/static/profile.ttl",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"tests",
								"static",
								"profile.ttl"
							]
						},
						"description": "A request for a Content-Type that the server will not support"
					},
					"response": []
				}
			],
			"description": "General HTTP functionality tests",
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}